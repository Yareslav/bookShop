{"ast":null,"code":"var _jsxFileName = \"C:\\\\My\\\\Programesoft\\\\Javascript\\\\bookshop\\\\src\\\\screens\\\\PasswordGenerator\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect, useRef, createContext } from \"react\";\nimport Container from \"../../globalComponents/Container\";\nimport Secure from \"../../assets/images/secure.png\";\nimport \"../../assets/styles/passwordGenerator.css\";\nimport CheckBox from \"./components/CheckBox\";\nimport ReactSlider from \"react-slider\";\nimport random from \"../../functions/random\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CheckBoxesContext = /*#__PURE__*/createContext();\n\nconst PasswordGenerator = () => {\n  _s();\n\n  const copyHandler = () => {\n    navigator.clipboard.writeText(result);\n  };\n\n  const [includingData, setIncludingData] = useState({\n    lowerCase: true,\n    upperCase: false,\n    numbers: true,\n    symbols: false\n  });\n  const [passwordLength, setPasswordLength] = useState(20);\n  const [lettersFrequency, setLettersFrequency] = useState(5);\n  const [numbersFrequency, setNumbersFrequency] = useState(5);\n  const [symbolFrequency, setSymbolFrequency] = useState(5);\n  const [result, setResult] = useState(\"\");\n\n  class GeneratePassword {\n    constructor() {\n      this.results = {\n        letters: {\n          number: 0,\n          mass: [],\n          variants: [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n        },\n        symbols: {\n          number: 0,\n          mass: [],\n          variants: [\"!\", \",\", \"/\", \".\", \">\", \"<\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \"*\", \"(\", \")\", \"{\", \"}\", \"[\", \"]\", \"+\", \"=\", \"-\", \":\", \";\", \" \"]\n        },\n        numbers: {\n          number: 0,\n          mass: [],\n          variants: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        }\n      };\n      const cannelGeneration = !Object.values(includingData).includes(true);\n      if (cannelGeneration) return;\n      const mass = [];\n      this.setNumbers();\n      this.fillResults();\n      mass.push(...this.results.letters.mass, ...this.results.symbols.mass, ...this.results.numbers.mass);\n      mass.sort(() => 0.5 - Math.random());\n      console.log(mass.length);\n      setResult(mass.join(\"\"));\n    }\n\n    setNumbers() {\n      const includeLetters = includingData.lowerCase || includingData.upperCase;\n      const sum = (includeLetters ? lettersFrequency : 0) + (includingData.numbers ? numbersFrequency : 0) + (includingData.symbols ? symbolFrequency : 0);\n      const coefficient = passwordLength / sum;\n      const {\n        results\n      } = this;\n      if (includeLetters) results.letters.number = this.getMaxValue(lettersFrequency * coefficient);\n      if (includingData.numbers) results.numbers.number = this.getMaxValue(numbersFrequency * coefficient);\n      if (includingData.symbols) results.symbols.number = this.getMaxValue(symbolFrequency * coefficient);\n      const activeArrays = Object.values(results).filter(elem => elem.number != 0);\n      let index = 0;\n\n      while (results.numbers.number + results.letters.number + results.symbols.number < passwordLength) {\n        activeArrays[index].number++;\n        index++;\n        if (index > activeArrays.length - 1) index = 0;\n      }\n    }\n\n    fillResults() {\n      const {\n        results\n      } = this;\n\n      for (const key in results) {\n        for (let i = 0; i < results[key].number; i++) {\n          const variants = results[key].variants;\n          let variant = variants[random(0, variants.length - 1)];\n\n          if (key == \"letters\") {\n            if (includingData.upperCase && includingData.lowerCase && random(0, 1) == 0) variant = variant.toUpperCase();else if (!includingData.lowerCase && includingData.upperCase) variant = variant.toUpperCase();\n          }\n\n          results[key].mass.push(variant);\n        }\n      }\n    }\n\n    getMaxValue(value) {\n      let data = Math.floor(value);\n      if (data < 1) return 1;\n      return data;\n    }\n\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    style: \"generator\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: Secure,\n      className: \"screen__image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"screen-margin title generator__center\",\n      children: \"Generate a strong password with our generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"generator__grid screen-margin\",\n      children: /*#__PURE__*/_jsxDEV(CheckBoxesContext.Provider, {\n        value: [includingData, setIncludingData],\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"blackTitle\",\n            children: \"Letters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CheckBox, {\n            text: \"include lowercase : (a,b,c,d,e,f)\",\n            type: \"lowerCase\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CheckBox, {\n            text: \"include uppercase : (A,B,C,D,E,F)\",\n            type: \"upperCase\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), (includingData.lowerCase || includingData.upperCase) && /*#__PURE__*/_jsxDEV(ReactSlider, {\n            defaultValue: lettersFrequency,\n            min: 1,\n            max: 10,\n            onChange: data => setLettersFrequency(data),\n            renderThumb: props => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"thumb-0\",\n              ...props,\n              children: lettersFrequency\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 40\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 64\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"blackTitle\",\n            children: \"Numbers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CheckBox, {\n            text: \"include numbers : (0,1,2,3,4,5,6,...)\",\n            type: \"numbers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), includingData.numbers && /*#__PURE__*/_jsxDEV(ReactSlider, {\n            defaultValue: numbersFrequency,\n            min: 1,\n            max: 10,\n            onChange: data => setNumbersFrequency(data),\n            renderThumb: props => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"thumb-0\",\n              ...props,\n              children: numbersFrequency\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 40\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"blackTitle\",\n            children: \"Symbols\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CheckBox, {\n            text: \"include symbols : (@,#,&,<,-,+,{,...)\",\n            type: \"symbols\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this), includingData.symbols && /*#__PURE__*/_jsxDEV(ReactSlider, {\n            defaultValue: symbolFrequency,\n            min: 1,\n            max: 10,\n            onChange: data => setSymbolFrequency(data),\n            renderThumb: props => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"thumb-0\",\n              ...props,\n              children: symbolFrequency\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 40\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 34\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"blackTitle\",\n            children: \"Password length\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ReactSlider, {\n            defaultValue: passwordLength,\n            min: 5,\n            max: 90,\n            onChange: data => setPasswordLength(data),\n            renderThumb: props => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"thumb-0\",\n              ...props,\n              children: passwordLength\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 40\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"screen-margin button screen__button\",\n      onClick: () => new GeneratePassword(),\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"screen__bigTitle \",\n        children: \"Create Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"generator__menu beet screen-margin\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"blackTitle generator__title\",\n        children: \"Your password :\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"generator__output\",\n        value: result,\n        onChange: eve => setResult(eve.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"generator__copy button\",\n        onClick: copyHandler,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Copy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PasswordGenerator, \"aRKL4g2CJf6E98NicZtBKL8bnto=\");\n\n_c = PasswordGenerator;\nexport default PasswordGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"PasswordGenerator\");","map":{"version":3,"sources":["C:/My/Programesoft/Javascript/bookshop/src/screens/PasswordGenerator/index.js"],"names":["React","useState","useContext","useEffect","useRef","createContext","Container","Secure","CheckBox","ReactSlider","random","CheckBoxesContext","PasswordGenerator","copyHandler","navigator","clipboard","writeText","result","includingData","setIncludingData","lowerCase","upperCase","numbers","symbols","passwordLength","setPasswordLength","lettersFrequency","setLettersFrequency","numbersFrequency","setNumbersFrequency","symbolFrequency","setSymbolFrequency","setResult","GeneratePassword","constructor","results","letters","number","mass","variants","cannelGeneration","Object","values","includes","setNumbers","fillResults","push","sort","Math","console","log","length","join","includeLetters","sum","coefficient","getMaxValue","activeArrays","filter","elem","index","key","i","variant","toUpperCase","value","data","floor","props","eve","target"],"mappings":"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","sourcesContent":["import React, {\r\n  useState,\r\n  useContext,\r\n  useEffect,\r\n  useRef,\r\n  createContext,\r\n} from \"react\";\r\nimport Container from \"../../globalComponents/Container\";\r\nimport Secure from \"../../assets/images/secure.png\";\r\nimport \"../../assets/styles/passwordGenerator.css\";\r\nimport CheckBox from \"./components/CheckBox\";\r\nimport ReactSlider from \"react-slider\";\r\nimport random from \"../../functions/random\";\r\nexport const CheckBoxesContext = createContext();\r\nconst PasswordGenerator = () => {\r\n  const copyHandler = () => {\r\n\t\tnavigator.clipboard.writeText(result);\r\n\t};\r\n  const [includingData, setIncludingData] = useState({\r\n    lowerCase: true,\r\n    upperCase: false,\r\n    numbers: true,\r\n    symbols: false,\r\n  });\r\n\tconst [passwordLength, setPasswordLength] = useState(20);\r\n\tconst [lettersFrequency,setLettersFrequency]=useState(5);\r\n\tconst [numbersFrequency,setNumbersFrequency]=useState(5);\r\n\tconst [symbolFrequency,setSymbolFrequency]=useState(5);\r\n\tconst [result,setResult]=useState(\"\");\r\n\tclass GeneratePassword{\r\n\t\tresults={\r\n\t\t\tletters:{\r\n\t\t\t\tnumber:0,\r\n        mass:[],\r\n        variants:[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\r\n\t\t\t},\r\n\t\t\tsymbols:{\r\n\t\t\t\tnumber:0,\r\n\t\t\t\tmass:[],\r\n\t\t\t\tvariants:[\"!\",\",\",\"/\",\".\",\">\",\"<\",\"@\",\"#\",\"$\",\"%\",\"^\",\"&\",\"*\",\"(\",\")\",\"{\",\"}\",\"[\",\"]\",\"+\",\"=\",\"-\",\":\",\";\",\" \"]\r\n\t\t\t},\r\n\t\t\tnumbers:{\r\n\t\t\t\tnumber:0,\r\n\t\t\t\tmass:[],\r\n\t\t\t\tvariants:[0,1,2,3,4,5,6,7,8,9]\r\n\t\t\t}\r\n\t\t}\r\n\t\tconstructor() {\r\n      const cannelGeneration=!Object.values(includingData).includes(true);\r\n      if (cannelGeneration) return;\r\n\t\t\tconst mass=[];\r\n\t\t\tthis.setNumbers();\r\n\t\t\tthis.fillResults();\r\n\t\t\tmass.push(...this.results.letters.mass,...this.results.symbols.mass,...this.results.numbers.mass);\r\n      mass.sort(()=>0.5-Math.random());\r\n      console.log(mass.length);\r\n\t\t\tsetResult(mass.join(\"\"));\r\n\t\t}\r\n\t\tsetNumbers() {\r\n      const includeLetters=(includingData.lowerCase || includingData.upperCase);\r\n      const sum=(includeLetters ? lettersFrequency : 0)+(includingData.numbers ? numbersFrequency : 0)+(includingData.symbols ? symbolFrequency : 0);\r\n      const coefficient=passwordLength/sum;\r\n      const {results}=this;\r\n      if (includeLetters) results.letters.number=this.getMaxValue(lettersFrequency*coefficient);\r\n      if (includingData.numbers) results.numbers.number=this.getMaxValue(numbersFrequency*coefficient);\r\n      if (includingData.symbols) results.symbols.number=this.getMaxValue(symbolFrequency*coefficient);\r\n      const activeArrays=Object.values(results).filter(elem=>elem.number!=0);\r\n      let index=0;\r\n      while ((results.numbers.number+results.letters.number+results.symbols.number)<passwordLength) {\r\n        activeArrays[index].number++;\r\n        index++;\r\n        if (index>activeArrays.length-1) index=0;\r\n      }\r\n\t\t}\r\n\t\tfillResults() {\r\n\t\t\tconst {results}=this;\r\n\t\t\tfor (const key in results) {\r\n\t\t\t\tfor (let i=0;i<results[key].number;i++) {\r\n          const variants=results[key].variants;\r\n          let variant=variants[random(0,variants.length-1)];\r\n          if (key==\"letters\") {\r\n            if (includingData.upperCase && includingData.lowerCase && random(0,1)==0) variant=variant.toUpperCase();\r\n            else if (!includingData.lowerCase && includingData.upperCase) variant=variant.toUpperCase();\r\n          }\r\n\t\t\t\t\tresults[key].mass.push(variant);\r\n\t\t\t\t}\r\n\t\t\t}\r\n    }\r\n    getMaxValue(value) {\r\n      let data=Math.floor(value);\r\n      if (data<1) return 1;\r\n      return data;\r\n    }\r\n\t}\r\n  return (\r\n    <Container style=\"generator\">\r\n      <img src={Secure} className=\"screen__image\" />\r\n      <p className=\"screen-margin title generator__center\">\r\n        Generate a strong password with our generator\r\n      </p>\r\n      <div className=\"generator__grid screen-margin\">\r\n        <CheckBoxesContext.Provider value={[includingData, setIncludingData]}>\r\n          <div>\r\n            <p className=\"blackTitle\">Letters</p>\r\n            <CheckBox\r\n              text=\"include lowercase : (a,b,c,d,e,f)\"\r\n              type=\"lowerCase\"\r\n            />\r\n            <CheckBox\r\n              text=\"include uppercase : (A,B,C,D,E,F)\"\r\n              type=\"upperCase\"\r\n            />\r\n\t\t\t\t\t\t{(includingData.lowerCase || includingData.upperCase) && <ReactSlider\r\n              defaultValue={lettersFrequency}\r\n              min={1}\r\n              max={10}\r\n              onChange={(data) => setLettersFrequency(data)}\r\n              renderThumb={(props) => (<div className=\"thumb-0\" {...props}>\r\n    \t\t\t\t\t\t{lettersFrequency}\r\n  \t\t\t\t\t\t</div>)}\r\n            \t/>}\r\n          </div>\r\n          <div>\r\n            <p className=\"blackTitle\">Numbers</p>\r\n            <CheckBox\r\n              text=\"include numbers : (0,1,2,3,4,5,6,...)\"\r\n              type=\"numbers\"\r\n            />\r\n\t\t\t\t\t\t{includingData.numbers && <ReactSlider\r\n              defaultValue={numbersFrequency}\r\n              min={1}\r\n              max={10}\r\n              onChange={(data) => setNumbersFrequency(data)}\r\n              renderThumb={(props) => (<div className=\"thumb-0\" {...props}>\r\n    \t\t\t\t\t\t{numbersFrequency}\r\n  \t\t\t\t\t\t</div>)}\r\n            \t/>}\r\n          </div>\r\n          <div>\r\n            <p className=\"blackTitle\">Symbols</p>\r\n            <CheckBox\r\n              text=\"include symbols : (@,#,&,<,-,+,{,...)\"\r\n              type=\"symbols\"\r\n            />\r\n\t\t\t\t\t\t\t{includingData.symbols && <ReactSlider\r\n              defaultValue={symbolFrequency}\r\n              min={1}\r\n              max={10}\r\n              onChange={(data) => setSymbolFrequency(data)}\r\n              renderThumb={(props) => (<div className=\"thumb-0\" {...props}>\r\n    \t\t\t\t\t\t{symbolFrequency}\r\n  \t\t\t\t\t\t</div>)}\r\n            \t/>}\r\n          </div>\r\n          <div>\r\n            <p className=\"blackTitle\">Password length</p>\r\n            <ReactSlider\r\n              defaultValue={passwordLength}\r\n              min={5}\r\n              max={90}\r\n              onChange={(data) => setPasswordLength(data)}\r\n              renderThumb={(props) => (<div className=\"thumb-0\" {...props}>\r\n    \t\t\t\t\t\t{passwordLength}\r\n  \t\t\t\t\t\t</div>)}\r\n            \t/>\r\n          </div>\r\n        </CheckBoxesContext.Provider>\r\n      </div>\r\n      <div className=\"screen-margin button screen__button\" onClick={()=>new GeneratePassword()}>\r\n        <p className=\"screen__bigTitle \">Create Password</p>\r\n      </div>\r\n      <div className=\"generator__menu beet screen-margin\">\r\n        <p className=\"blackTitle generator__title\">Your password :</p>\r\n        <input type=\"text\" className=\"generator__output\" value={result} onChange={(eve)=>setResult(eve.target.value)}/>\r\n        <div className=\"generator__copy button\" onClick={copyHandler}>\r\n          <p>Copy</p>\r\n        </div>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\nexport default PasswordGenerator;"]},"metadata":{},"sourceType":"module"}